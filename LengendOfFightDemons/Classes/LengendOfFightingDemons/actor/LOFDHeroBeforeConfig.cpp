#include "LOFDHeroBeforeConfig.h"#include "TypeConver.h"NS_LOFD_BEGINHeroBeforeDef* HeroBeforeConfig::getHeroBeforeDefById(int id){	int len = defVec.size();	for(int i=0;i<len;i++)	{		HeroBeforeDef* def = defVec.at(i);		if(def->hero_id == id)		return def;	}	return nullptr;}void HeroBeforeConfig::parse(std::string data){	rapidjson::Document doc;	doc.Parse<0>(data.c_str());	if(doc.HasParseError())	{		cocos2d::log("%s"," HeroBeforeDef error");	}	else	{		for(int i = 0; i < cocostudio::DictionaryHelper::getInstance()->getArrayCount_json(doc,"datas"); i++)		{			HeroBeforeDef* def1 = new HeroBeforeDef();			defVec.push_back(def1);			const rapidjson::Value& HeroBeforeDefValue = cocostudio::DictionaryHelper::getInstance()->getSubDictionary_json(doc,"datas" ,i);			def1->half_body =  cocostudio::DictionaryHelper::getInstance()->getIntValue_json(HeroBeforeDefValue,"half_body");			def1->move_speed =  cocostudio::DictionaryHelper::getInstance()->getIntValue_json(HeroBeforeDefValue,"move_speed");			def1->arms =  cocostudio::DictionaryHelper::getInstance()->getIntValue_json(HeroBeforeDefValue,"arms");			def1->hero_name =  cocostudio::DictionaryHelper::getInstance()->getStringValue_json(HeroBeforeDefValue,"hero_name");			def1->colour =  cocostudio::DictionaryHelper::getInstance()->getIntValue_json(HeroBeforeDefValue,"colour");			def1->up_int =  cocostudio::DictionaryHelper::getInstance()->getIntValue_json(HeroBeforeDefValue,"up_int");			def1->head_icon =  cocostudio::DictionaryHelper::getInstance()->getIntValue_json(HeroBeforeDefValue,"head_icon");			def1->intro =  cocostudio::DictionaryHelper::getInstance()->getStringValue_json(HeroBeforeDefValue,"intro");			def1->need_item =  cocostudio::DictionaryHelper::getInstance()->getIntValue_json(HeroBeforeDefValue,"need_item");			def1->next_id =  cocostudio::DictionaryHelper::getInstance()->getIntValue_json(HeroBeforeDefValue,"next_id");			def1->all_body =  cocostudio::DictionaryHelper::getInstance()->getIntValue_json(HeroBeforeDefValue,"all_body");			def1->base_cri =  cocostudio::DictionaryHelper::getInstance()->getIntValue_json(HeroBeforeDefValue,"base_cri");			def1->behavior_id =  cocostudio::DictionaryHelper::getInstance()->getIntValue_json(HeroBeforeDefValue,"behavior_id");			def1->last_id =  cocostudio::DictionaryHelper::getInstance()->getIntValue_json(HeroBeforeDefValue,"last_id");			def1->up_agi =  cocostudio::DictionaryHelper::getInstance()->getIntValue_json(HeroBeforeDefValue,"up_agi");			def1->ai_id =  cocostudio::DictionaryHelper::getInstance()->getIntValue_json(HeroBeforeDefValue,"ai_id");			def1->job_id =  cocostudio::DictionaryHelper::getInstance()->getIntValue_json(HeroBeforeDefValue,"job_id");			def1->intro_feature =  cocostudio::DictionaryHelper::getInstance()->getStringValue_json(HeroBeforeDefValue,"intro_feature");			def1->job_name =  cocostudio::DictionaryHelper::getInstance()->getStringValue_json(HeroBeforeDefValue,"job_name");			def1->sex =  cocostudio::DictionaryHelper::getInstance()->getIntValue_json(HeroBeforeDefValue,"sex");			def1->type =  cocostudio::DictionaryHelper::getInstance()->getIntValue_json(HeroBeforeDefValue,"type");			def1->base_dr =  cocostudio::DictionaryHelper::getInstance()->getIntValue_json(HeroBeforeDefValue,"base_dr");			def1->armor_type =  cocostudio::DictionaryHelper::getInstance()->getIntValue_json(HeroBeforeDefValue,"armor_type");			def1->atk_speed =  cocostudio::DictionaryHelper::getInstance()->getIntValue_json(HeroBeforeDefValue,"atk_speed");			def1->hero_id =  cocostudio::DictionaryHelper::getInstance()->getIntValue_json(HeroBeforeDefValue,"hero_id");			def1->up_str =  cocostudio::DictionaryHelper::getInstance()->getIntValue_json(HeroBeforeDefValue,"up_str");			def1->scout_range =  cocostudio::DictionaryHelper::getInstance()->getIntValue_json(HeroBeforeDefValue,"scout_range");			def1->normal_hurt_type =  cocostudio::DictionaryHelper::getInstance()->getIntValue_json(HeroBeforeDefValue,"normal_hurt_type");			def1->cate =  cocostudio::DictionaryHelper::getInstance()->getIntValue_json(HeroBeforeDefValue,"cate");			def1->camp_id =  cocostudio::DictionaryHelper::getInstance()->getIntValue_json(HeroBeforeDefValue,"camp_id");			def1->need_res =  cocostudio::DictionaryHelper::getInstance()->getIntValue_json(HeroBeforeDefValue,"need_res");                        std::string skillIds = cocostudio::DictionaryHelper::getInstance()->getStringValue_json(HeroBeforeDefValue,"skill_id");            std::vector<std::string> skillIdsVector = moonsugar::TypeConver::splitStr(skillIds, "|");            long m = skillIdsVector.size();            for (int j = 0; j < m; j ++) {                std::string skillIdStr = skillIdsVector.at(j);                int skillId = moonsugar::TypeConver::CharToInt(skillIdStr.c_str());                def1->skillIds.push_back(skillId);            }			//def1->skill_id =  cocostudio::DictionaryHelper::getInstance()->getStringValue_json(HeroBeforeDefValue,"skill_id");			def1->atk_range =  cocostudio::DictionaryHelper::getInstance()->getIntValue_json(HeroBeforeDefValue,"atk_range");		}	}        hasParse = true;}NS_LOFD_END