#include "LOFDSkillBeforeConfig.h"NS_LOFD_BEGINvoid SkillBeforeConfig::parse(std::string data){    rapidjson::Document doc;    doc.Parse<0>(data.c_str());    if (doc.HasParseError())    {        cocos2d::log("%s", "skill Config error");    }    else    {        int len = cocostudio::DictionaryHelper::getInstance()->getArrayCount_json(doc, "datas");        for(int i= 0; i< len;i++)        {            SkillBeforeDef* def = new SkillBeforeDef();            defVec.push_back(def);                        const rapidjson::Value& skillDef = cocostudio::DictionaryHelper::getInstance()->getSubDictionary_json(doc,"datas",i);            def->atk_type = cocostudio::DictionaryHelper::getInstance()->getIntValue_json(skillDef,"atk_type");            def->atk_pro =  cocostudio::DictionaryHelper::getInstance()->getIntValue_json(skillDef,"atk_pro");            def->up_need_silver = cocostudio::DictionaryHelper::getInstance()->getIntValue_json(skillDef,"up_need_silver");            def->max_level = cocostudio::DictionaryHelper::getInstance()->getIntValue_json(skillDef,"max_level");            def->intro_tips = cocostudio::DictionaryHelper::getInstance()->getStringValue_json(skillDef,"intro_tips");            def->skill_effect_type = cocostudio::DictionaryHelper::getInstance()->getIntValue_json(skillDef,"skill_effect_type");            def->sword_arg = cocostudio::DictionaryHelper::getInstance()->getIntValue_json(skillDef,"sword_arg");            def->intro = cocostudio::DictionaryHelper::getInstance()->getStringValue_json(skillDef,"intro");            def->add_buff_id = cocostudio::DictionaryHelper::getInstance()->getStringValue_json(skillDef,"add_buff_id");            def->add_buff_time = cocostudio::DictionaryHelper::getInstance()->getIntValue_json(skillDef,"add_buff_time");            def->skill_hurt_type = cocostudio::DictionaryHelper::getInstance()->getIntValue_json(skillDef,"skill_hurt_type");            def->atk_add_value = cocostudio::DictionaryHelper::getInstance()->getIntValue_json(skillDef,"atk_add_value");            def->skill_target_type = cocostudio::DictionaryHelper::getInstance()->getIntValue_json(skillDef,"skill_target_type");            def->skill_range = cocostudio::DictionaryHelper::getInstance()->getIntValue_json(skillDef,"skill_range");            def->skill_effect_id = cocostudio::DictionaryHelper::getInstance()->getStringValue_json(skillDef,"skill_effect_id");            def->skill_hurt_range = cocostudio::DictionaryHelper::getInstance()->getIntValue_json(skillDef,"skill_hurt_range");            def->skill_id = cocostudio::DictionaryHelper::getInstance()->getIntValue_json(skillDef,"skill_id");            def->up_need_soul = cocostudio::DictionaryHelper::getInstance()->getIntValue_json(skillDef,"up_need_soul");            def->skill_CD = cocostudio::DictionaryHelper::getInstance()->getIntValue_json(skillDef,"skill_CD");            def->skill_type = cocostudio::DictionaryHelper::getInstance()->getIntValue_json(skillDef,"skill_type");            def->up_atk_pro = cocostudio::DictionaryHelper::getInstance()->getIntValue_json(skillDef,"up_atk_pro");            def->skill_name = cocostudio::DictionaryHelper::getInstance()->getStringValue_json(skillDef,"skill_name");            def->skill_icon = cocostudio::DictionaryHelper::getInstance()->getIntValue_json(skillDef,"skill_icon");            def->up_effect_add = cocostudio::DictionaryHelper::getInstance()->getIntValue_json(skillDef,"up_effect_add");        }    }    }SkillBeforeDef* SkillBeforeConfig::getSkillDefByID(int id){    for (int i = 0; i < defVec.size(); i ++) {        lofd::SkillBeforeDef * skillDef = defVec.at(i);        if (skillDef->skill_id == id)        {            return skillDef;        }    }    return nullptr;}NS_LOFD_END